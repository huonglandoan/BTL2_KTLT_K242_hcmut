#include <iostream>
#include <fstream>
#include <sstream>
#include <filesystem>
#include <vector>

using namespace std;
namespace fs = std::filesystem;

// H√†m so s√°nh n·ªôi dung hai file
bool compareFiles(const string &file1, const string &file2) {
    ifstream f1(file1), f2(file2);
    if (!f1.is_open() || !f2.is_open()) {
        cerr << "Kh√¥ng th·ªÉ m·ªü file: " << file1 << " ho·∫∑c " << file2 << endl;
        return false;
    }
    stringstream ss1, ss2;
    ss1 << f1.rdbuf();
    ss2 << f2.rdbuf();
    return (ss1.str() == ss2.str());
}

int main() {
    vector<string> differentFiles; // L∆∞u danh s√°ch c√°c file c√≥ s·ª± kh√°c bi·ªát
    int totalFiles = 0, differentCount = 0;

    // Duy·ªát qua t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c "answer/"
    for (const auto &entry : fs::directory_iterator("answer")) {
        string answerFile = entry.path().string();
        string fileName = entry.path().filename().string();
        string outputFile = "output/" + fileName; // Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c output

        totalFiles++;
        
        if (!fs::exists(outputFile)) {
            cerr << "‚ùå Kh√¥ng t√¨m th·∫•y file output t∆∞∆°ng ·ª©ng: " << outputFile << endl;
            continue;
        }

        if (!compareFiles(answerFile, outputFile)) {
            differentFiles.push_back(fileName);
            differentCount++;
        }
    }

    // In k·∫øt qu·∫£
    cout << "üìå T·ªïng s·ªë file ki·ªÉm tra: " << totalFiles << endl;
    cout << "‚úÖ S·ªë file gi·ªëng nhau: " << (totalFiles - differentCount) << endl;
    cout << "‚ùå S·ªë file kh√°c nhau: " << differentCount << endl;

    if (!differentFiles.empty()) {
        cout << "üìÇ C√°c file kh√°c nhau:\n";
        for (const string &file : differentFiles) {
            cout << "   - " << file << endl;
        }
    } else {
        cout << "üéâ T·∫•t c·∫£ file ƒë·ªÅu gi·ªëng nhau!\n";
    }

    return 0;
}
